# ----------------------------------------------------------------------
# LALSuite: compiler tests
#
# Top-level build tests for various non-default compilers.
# ----------------------------------------------------------------------

.compiler-test:
  stage: compiler tests
  needs: []
  extends:
    - .make-distcheck
  rules:
    - !reference [.ci-compiler, rules]
    - !reference [.ci-merge-build, rules]
    - !reference [.ci-nightly-deploy, rules]

# -- clang ---------------------------

clang:
  extends:
    - .compiler-test
  parallel:
    matrix:
      - CLANG_VERSION:
         - 14
         - 15
         - 16
         - 17
         - 18
         - dev
  image: igwn/lalsuite-dev-clang:$CLANG_VERSION
  variables:
    CONFIGURE_FLAGS: "--enable-doxygen --enable-python --enable-swig-python"
    # Clang has weird bugs when compiling with CFLAGS=-O3
    CFLAGS: "-O2"
    # build with the right version
    CC: "clang-$CLANG_VERSION"
    CXX: "clang++-$CLANG_VERSION"
  before_script:
    # 'dev' build doesn't use version in variables
    - if [ "${CLANG_VERSION}" = "dev" ]; then
        export CC="clang";
        export CXX="clang++";
      fi
    - !reference [.compiler-test, before_script]

# -- gcc -----------------------------

gcc:
  extends:
    - .compiler-test
  parallel:
    matrix:
      - GCC_VERSION:
          - 10
          - 11
          - 12
          - 13
          - 14
  image: igwn/lalsuite-dev-gcc:$GCC_VERSION
  variables:
    CONFIGURE_FLAGS: "--enable-doxygen --enable-python --enable-swig-python"

# -- cuda ----------------------------

cuda:
  extends:
    - .compiler-test
  image: igwn/lalsuite-dev-cuda:el8
  script:
    - ./00boot
    # test ./configure works with non-system CUDA install path
    - rm -f $PWD/gitlab-ci-non-sys-cuda-path
    - ln -s /usr/local/cuda $PWD/gitlab-ci-non-sys-cuda-path
    - ./configure --with-cuda=$PWD/gitlab-ci-non-sys-cuda-path
    - rm -f $PWD/gitlab-ci-non-sys-cuda-path
    # test ./configure works with system CUDA install path
    - ./configure --with-cuda=/usr/local/cuda
    # check compilation and tarball
    - make -j${CPU_COUNT} dist
    - make -j${CPU_COUNT}
    # just compile test suite; some tests require a CUDA device to run
    - make -j${CPU_COUNT} VERBOSE=1 check TESTS=
    - make -j${CPU_COUNT} install
  artifacts:
    # we don't run the test suite, so there are no reports
    reports:
      junit: []
