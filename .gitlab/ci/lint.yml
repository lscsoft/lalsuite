# ----------------------------------------------------------------------
# LALSuite: linting
#
# Run some quality checks on the source code.
# ----------------------------------------------------------------------

# job template for lint jobs
.lint:
  stage: lint
  needs: []
  rules:
    - !reference [.ci-lint, rules]
    - !reference [.ci-nightly-deploy, rules]
    - !reference [.ci-push-build, rules]
    - !reference [.ci-merge-build, rules]

include:
  # https://git.ligo.org/explore/catalog/computing/gitlab/components/sast
  - component: $CI_SERVER_FQDN/computing/gitlab/components/sast/sast@~latest
    inputs:
      stage: lint
      run_advanced_sast: true

  # https://git.ligo.org/explore/catalog/computing/gitlab/components/python
  - component: $CI_SERVER_FQDN/computing/gitlab/components/python/code-quality@1
    inputs:
      stage: lint
      requirements: "flake8-executable"

# update component jobs with our rules

gitlab-advanced-sast:
  rules: !reference [.lint, rules]
  needs: []
  variables:
    # set XDG_CONFIG_HOME (set in global variables) to something that always exists
    XDG_CONFIG_HOME: "/tmp"

flake8-code_quality:
  rules: !reference [.lint, rules]
  needs: []

# custom Lint jobs

.lint:api:
  extends:
    - .build-job
    - .lint
  image: quay.io/igwn/lalsuite-dev:el8-testing
  variables:
    CONFIGURE_FLAGS: "--disable-lalapps --disable-doxygen --disable-swig"
  artifacts:
    paths:
      - api-reports
  allow_failure:
    exit_codes: 100   # failed to build LALSuite before changes

lint:api-merge-diff:
  extends:
    - .lint:api
  script:
    # install required packages
    - retry yum -y install
          abi-dumper
          abi-compliance-checker
    # configure and build LALSuite before changes are merged
    # - allow job to fail if target branch cannot be fetched or built (i.e. due to an unrelated failure)
    - test "x${CI_MERGE_REQUEST_DIFF_BASE_SHA}" != x
    - git fetch --depth=1 ${CI_REPOSITORY_URL} ${CI_MERGE_REQUEST_DIFF_BASE_SHA} || exit 100
    - git checkout ${CI_MERGE_REQUEST_DIFF_BASE_SHA} || exit 100
    - ./00boot || exit 100
    - xargs ./configure --prefix=${PWD}/OLD <<< ${CONFIGURE_FLAGS} || exit 100
    - make -j${CPU_COUNT} || exit 100
    - make install || exit 100
    - make distclean || exit 100
    # configure and build LALSuite after changes are merged
    - git checkout ${CI_COMMIT_SHA}
    - ./00boot
    - xargs ./configure --prefix=${PWD}/NEW <<< ${CONFIGURE_FLAGS}
    - make -j${CPU_COUNT}
    - make install
    # compare API of LALSuite libraries before and after changes are merged
    - export PYTHONUNBUFFERED=yes
    - ./common/code-quality-scripts/compare_library_api
          --old-lib-dir=./OLD/lib
          --old-pub-header-dir=./OLD/include/lal
          --old-sha=${CI_MERGE_REQUEST_DIFF_BASE_SHA}
          --new-lib-dir=./NEW/lib
          --new-pub-header-dir=./NEW/include/lal
          --new-sha=${CI_COMMIT_SHA}
          --output-dir=./api-reports
          --table-title="API Changes From Merge Request"
          lal lalsupport
          lalframe
          lalmetaio
          lalsimulation
          lalburst
          lalinspiral
          lalinference
          lalpulsar
  rules:
    # run for merge requests only
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

lint:api-last-release:
  extends:
    - .lint:api
  script:
    # install required packages
    - retry yum -y install
          lalsuite-devel
          lalsuite-debug
          abi-dumper
          abi-compliance-checker
    # configure and build LALSuite at current commit
    - ./00boot
    - xargs ./configure --prefix=${PWD}/NEW <<< ${CONFIGURE_FLAGS}
    - make -j${CPU_COUNT}
    - make install
    # compare API of LALSuite libraries between last release and current commit
    - export PYTHONUNBUFFERED=yes
    - ./common/code-quality-scripts/compare_library_api
          --old-lib-dir=/usr/lib64
          --old-pub-header-dir=/usr/include/lal
          --old-debug-dir=/usr/lib/debug
          --new-lib-dir=./NEW/lib
          --new-pub-header-dir=./NEW/include/lal
          --new-sha=${CI_COMMIT_SHA}
          --output-dir=./api-reports
          --table-title="API Changes Since Last Release"
          lal lalsupport
          lalframe
          lalmetaio
          lalsimulation
          lalburst
          lalinspiral
          lalinference
          lalpulsar
  rules:
    - !reference [.ci-lint, rules]
    # run on release branches
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME =~ /release/'

lint:pre-commit:
  extends:
    .lint
  image: quay.io/igwn/lalsuite-dev:el8
  variables:
    GIT_STRATEGY: fetch   # this jobs needs the full Git history to update the authors
  before_script:
    # this jobs needs the full Git history to update the authors
    - git fetch --unshallow --quiet
    # check that the first commit in LALSuite exists
    - git log 8150fb34fae54b0cc46e8ef14f906bc5d714a381
  script:
    # install pre-commit
    - PYTHON="python3.11"    # pre-commit hooks require Python >=3.10
    - !reference [.python-venv]
    - retry python -m pip install pre-commit
    - retry pre-commit install-hooks
    # run pre-commit
    - |
      echo "env: CI_COMMIT_AUTHOR=${CI_COMMIT_AUTHOR}"
      pre-commit run -a && status=0 || status=$?
      if ! git diff --quiet; then
        echo "------------------------------------------------------------------------"
        echo "The pre-commit hooks have made the following fixes to your code:"
        echo "------------------------------------------------------------------------"
        git diff
        echo "------------------------------------------------------------------------"
        echo "To reproduce these fixes locally, install pre-commit, then run:"
        echo "$ pre-commit install"
        echo "$ pre-commit run -a"
        echo "See CONTRIBUTING.md for further information."
        echo "------------------------------------------------------------------------"
      fi
      ./common/code-quality-scripts/git_diff_to_code_quality_report "pre-commit fixes" > code-quality-pre-commit.json
      exit ${status}
  artifacts:
    reports:
      codequality: code-quality-pre-commit.json

lint:depends:
  extends:
    - .build-job
    - .lint
  image: quay.io/igwn/lalsuite-dev:el8
  before_script:
    - !reference [.python-venv]
    - retry python -m pip install
          coloredlogs
          pyyaml
          python-debian
          python-rpm-spec
  script:
    - ./common/code-quality-scripts/check_library_dependencies
  rules:
    - !reference [.ci-lint, rules]
    - !reference [.ci-merge-build, rules]

lint:gitignore:
  extends:
    - .build-job
    - .lint
  image: quay.io/igwn/lalsuite-dev:el8
  script:
    # build in source directory, including tests
    - ./00boot
    - ./configure ${ENABLE_NIGHTLY} --enable-doxygen --enable-python --enable-swig-python
    - make -j${CPU_COUNT} VERBOSE=1 all
    - make -j${CPU_COUNT} VERBOSE=1 check TESTS=
    # install pre-commit
    - PYTHON="python3.11"    # pre-commit hooks require Python >=3.10
    - !reference [.python-venv]
    - retry python -m pip install pre-commit
    - retry pre-commit install-hooks
    # check for build files not in .gitignore
    - |
      status=0
      git status --short | sed -n 's|^?? ||p' >> .gitignore
      pre-commit run -a fix-gitignore-entries
      if ! git diff --quiet; then
        echo "------------------------------------------------------------------------"
        echo "The following entries are missing from the .gitignore files:"
        echo "------------------------------------------------------------------------"
        git diff
        echo "------------------------------------------------------------------------"
        status=1
      fi
      ./common/code-quality-scripts/git_diff_to_code_quality_report "missing .gitignore entries" > code-quality-gitignore.json
      exit ${status}
  artifacts:
    reports:
      codequality: code-quality-gitignore.json
  rules:
    - !reference [.ci-lint, rules]
    - !reference [.ci-merge-build, rules]
