.PHONY: clean-local-test-dirs
.PHONY: clean-tested-logs
.PHONY: gen-tested-programs-log
.PHONY: test-ref-tarball-dist-hook

check-local: gen-tested-programs-log
clean-local: clean-local-test-dirs clean-tested-logs

## so that additional flags can be easily appended with
##   AM_CPPFLAGS += ...
AM_CPPFLAGS = @AM_CPPFLAGS@

## here we should be using OMP_THREAD_LIMIT, instead of OMP_NUM_THREADS,
## to limit the number of threads used by OpenMP but this is a OpenMP
## 4.5 feature and not currently supported by the compilers we are
## currently using. Therefore once we have an OpenMP-4.5 compiler we
## should switch to using OMP_THREAD_LIMIT instead of OMP_NUM_THREADS

TESTS_ENVIRONMENT = \
	$(TESTS_ENV_CONFIG_VARS) \
	export LC_ALL; LC_ALL=C; \
	export OMP_NUM_THREADS; OMP_NUM_THREADS=2; \
	export LAL_DEBUG_LEVEL; LAL_DEBUG_LEVEL="msglvl1,memdbg,${EXTRA_LAL_DEBUG_LEVEL}"; \
	export LAL_TEST_SRCDIR; LAL_TEST_SRCDIR="$(abs_srcdir)"; \
	export LAL_TEST_BUILDDIR; LAL_TEST_BUILDDIR="$(abs_builddir)"; \
	export LAL_TEST_PKGDATADIR; LAL_TEST_PKGDATADIR="$(abs_top_srcdir)/lib"; \
	export LAL_DATA_PATH; LAL_DATA_PATH="$${LAL_TEST_PKGDATADIR}:$(LAL_DATA_PATH)"; \
	export PATH; PATH=".:$(LAL_BIN_PATH):$${PATH}"; \
	export PYTHON; PYTHON="$(PYTHON)"; \
	lalsuite_path="$(abs_top_builddir)/python"; \
	test "x$(builddir)" = "x$(srcdir)" || lalsuite_path="$${lalsuite_path}:$(abs_top_srcdir)/python"; \
	test "x$(LAL_PYTHON_PATH)" = x || lalsuite_path="$${lalsuite_path}:$(LAL_PYTHON_PATH)"; \
	test "x$${PYTHONPATH}" = x || lalsuite_path="$${lalsuite_path}:$${PYTHONPATH}"; \
	export PYTHONPATH; PYTHONPATH="$${lalsuite_path}"; \
	$(test_script_compiler__longtests); \
	$(END_OF_LIST)

test_programs =
test_scripts =
test_helpers =
test_extra_files =
check_PROGRAMS = $(test_programs) $(test_helpers)
TESTS = $(test_programs) $(test_scripts)
EXTRA_DIST += $(test_scripts) $(test_extra_files)

## Builds all test helper programs before running tests
## as these may be shared between lalpulsar/bin directories
all-local: $(test_helpers)

test_script_runner = $(top_srcdir)/gnuscripts/lalsuite_run_uninstalled
test_script_runner_args = --verbose '$(abs_top_builddir)' '$(abs_builddir)' '$(LDADD)'
EXTRA_DIST += $(test_script_runner)

test_script_compiler = $(top_srcdir)/gnuscripts/lalpulsar_bin_test_compiler
EXTRA_DIST += $(test_script_compiler)

test_script_compiler__longtests = \
	skip_longtest=; \
	if [ "X$(subdir)" = "Xbin/longtests" ]; then \
		if [ "X$${LONGTESTS}" != X ]; then \
			echo "RUNNING: $$f"; \
		else \
			skip_longtest=1; \
		fi \
        fi

TEST_EXTENSIONS = .sh .py
SH_LOG_COMPILER = $(test_script_compiler) "$${skip_longtest}" sh "$(test_extra_files)" "$(test_script_runner) $(test_script_runner_args)"
PY_LOG_COMPILER = $(test_script_compiler) "$${skip_longtest}" py "$(test_extra_files)" "$(test_script_runner) $(test_script_runner_args)"

gen-tested-programs-log:
	@echo "# $(abs_builddir)/.tested_programs.log" > .tested_programs.log; \
	if test "X$(TESTS)" != X; then \
		echo 'programs $(subdir) $(bin_PROGRAMS)' >> .tested_programs.log; \
	fi

clean-tested-logs:
	-rm -f .tested_*.log

clean-local-test-dirs:
	@for file in $(test_scripts); do \
		scriptname=; \
		case $${file} in \
			*.sh) \
				scriptname=`expr "X$${file}" : "X\([^/]*\)\.sh$$"`; \
				;; \
			*.py) \
				scriptname=`expr "X$${file}" : "X\([^/]*\)\.py$$"`; \
				;; \
		esac; \
		if test "X$${scriptname}" != X; then \
			echo " rm -rf $${scriptname}.testdir/"; \
			rm -rf $${scriptname}.testdir/ || exit 1; \
		fi; \
	done

dist-hook: test-ref-tarball-dist-hook
	@for file in $(test_scripts); do \
		scriptname=; \
		case $${file} in \
			*.sh) \
				scriptname=`expr "X$${file}" : "X\([^/]*\)\.sh$$"`; \
				;; \
			*.py) \
				scriptname=`expr "X$${file}" : "X\([^/]*\)\.py$$"`; \
				;; \
		esac; \
		if test "X$${scriptname}" != X && test -r "$(srcdir)/$${scriptname}.tar.gz"; then \
			cp "$(srcdir)/$${scriptname}.tar.gz" "$(distdir)/$${scriptname}.tar.gz"; \
		fi; \
	done
