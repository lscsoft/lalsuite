# -*- coding: utf-8 -*-

"""
LIGO Scientific Collaboration Algorithm Library - minimal Python package

LALSuite is the LIGO Scientific Collaboration Algorithm Library for
gravitational-wave analysis. Its primary purpose is searching for and
characterizing astrophysical signals in gravitational-wave time series data,
particularly data from ground-based detectors such as `LIGO
<https://www.ligo.org>`_ and `Virgo <http://www.virgo-gw.eu>`_.

LALSuite consists of a set of ``configure``-``make``-``install`` style software
packages organized by problem domain or source classification. This Python
package provides a standalone, dependency-free binary distribution of the
libraries and Python modules in LALSuite for Linux and macOS.

Installing LALSuite from the Python Package Index requires pip >= 19.3.

To install, simply run::

    $ pip install lalsuite
"""

import os
import shutil
import sysconfig
import tempfile
from distutils.command.build_scripts import build_scripts as _build_scripts
from pathlib import Path
from string import Template

from setuptools import (
    Extension,
    find_packages,
    setup,
)
from setuptools.command.build_ext import build_ext as _build_ext

# These variables come from automake.
subst = {}
subst['prefix'] = subst['PYTHON_PREFIX'] = subst['PYTHON_EXEC_PREFIX'] = (
    os.path.abspath('build/inst')
)
subst['exec_prefix'] = Template('@exec_prefix@').substitute(**subst)
BINDIR = Path(Template('@bindir@').substitute(**subst))
DATADIR = Path(Template('$prefix/share').substitute(**subst))
LIBEXECDIR = Path(Template('@libexecdir@').substitute(**subst))
PYTHONDIR = Path(Template('@pythondir@').substitute(**subst))
BASE_VERSION = '@BASE_VERSION@'
NIGHTLY_VERSION = '@NIGHTLY_VERSION@'

if NIGHTLY_VERSION:
    VERSION = BASE_VERSION + '.' + NIGHTLY_VERSION
else:
    VERSION = BASE_VERSION

SHLIB_SUFFIX = sysconfig.get_config_var("SHLIB_SUFFIX")


class build_ext(_build_ext):
    """Override setuptools build_ext: just copy pre-built modules.
    """
    def build_extension(self, ext):
        src = PYTHONDIR / (ext.name.replace('.', os.path.sep) + SHLIB_SUFFIX)
        dst = self.get_ext_fullpath(ext.name)
        self.copy_file(src, dst)


stub = """\
#!python
import os
import sys
try:
    from importlib.resources import files, as_file
except ImportError:  # FIXME: Python < 3.9
    from importlib_resources import files, as_file
with as_file(files('lalapps') / 'bin' / '{}') as path:
    os.execv(path, sys.argv)
"""


class build_scripts(_build_scripts):
    """Override setuptools install_scripts: strip the .py extensions and
    add the shebang lines.
    """
    def run(self):
        old_scripts = self.scripts[:]
        new_scripts = set()
        self.mkpath(self.build_dir)
        with tempfile.TemporaryDirectory(dir=self.build_dir) as tmpdir:
            tmpdir = Path(tmpdir)
            for old_script in map(Path, old_scripts):
                basename = old_script.name
                base = old_script.with_suffix("").name
                if LIBEXECDIR not in old_script.parents:  # C executable
                    new_script = tmpdir / basename
                    new_script.write_text(stub.format(basename))
                elif old_script.suffix == '.py':  # Python script
                    new_script = tmpdir / base
                    with open(new_script, 'wb') as outfile:
                        outfile.write(b'#!python\n')
                        with open(old_script, 'rb') as infile:
                            shutil.copyfileobj(infile, outfile)
                else:
                    new_script = old_script
                new_scripts.add(new_script)
            self.scripts = list(new_scripts)
            _build_scripts.run(self)
            self.scripts = old_scripts


setup(
    # metadata
    name='lalsuite',
    license='GPL-2+',
    version=VERSION,
    description=__doc__.strip().split('\n')[0],
    long_description='\n'.join(__doc__.strip().split('\n')[1:]).strip(),
    author='LIGO Scientific Collaboration',
    author_email='lal-discuss@ligo.org',
    maintainer='Adam Mercer',
    maintainer_email='adam.mercer@ligo.org',
    url='https://git.ligo.org/lscsoft/lalsuite',
    project_urls={
        "Bug Tracker": "https://git.ligo.org/lscsoft/lalsuite/-/issues/",
        "Documentation": "https://lscsoft.docs.ligo.org/lalsuite/",
        "Source Code": "https://git.ligo.org/lscsoft/lalsuite",
    },
    classifiers=[
        'Development Status :: 5 - Production/Stable',
        'Intended Audience :: Science/Research',
        'License :: OSI Approved :: '
        'GNU General Public License v2 or later (GPLv2+)',
        'Operating System :: POSIX',
        'Natural Language :: English',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.7',
        'Programming Language :: Python :: 3.8',
        'Programming Language :: Python :: 3.9',
        'Programming Language :: Python :: 3.10',
        'Programming Language :: Python :: 3.11',
        'Topic :: Scientific/Engineering',
        'Topic :: Scientific/Engineering :: Astronomy',
        'Topic :: Scientific/Engineering :: Physics',
    ],
    # build
    cmdclass={
        'build_ext': build_ext,
        'build_scripts': build_scripts,
    },
    # contents
    package_dir={
        '': str(PYTHONDIR),
        'lalapps.bin': str(BINDIR),
        'lalapps.data': str(DATADIR),
    },
    package_data={
        'lalapps.bin': ['*'],
        'lalapps.data': ['*'],
        '': ['*.csv'],
    },
    packages=find_packages(PYTHONDIR) + [
        'lalapps.bin',
        'lalapps.data',
    ],
    scripts=list(map(str, (
        list(BINDIR.glob("*"))
        + list(LIBEXECDIR.glob('**/*.py'))
    ))),
    ext_modules=[
        Extension(
            str(path.relative_to(PYTHONDIR).with_suffix("")).replace('/', '.'),
            [],
        ) for path in PYTHONDIR.glob('**/*.so')
    ],
    # requirements
    python_requires='>=3.8',
    setup_requires=[
        'setuptools',
    ],
    install_requires=[
        'astropy',
        "importlib_resources>=1.3.0; python_version<'3.9'",
        'ligo-segments',
        'lscsoft-glue',
        'matplotlib',
        'numpy>=1.7',
        'python-dateutil',
        'scipy',
    ],
    extras_require={
        'lalinference': [
            'gwdatafind',
            'gwpy',
        ],
        'test': [
            'pytest',
        ],
    },
)
