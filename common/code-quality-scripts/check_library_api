#!/usr/bin/env python3
# Author: Karl Wette, 2022

"""Compare API of old/new LALSuite libraries"""

import sys
import json
import re
import argparse
from tempfile import TemporaryDirectory
from pathlib import Path
from subprocess import run, PIPE, DEVNULL
from xml.etree.ElementTree import parse

API_NONE = 0
API_MINOR = 1
API_MAJOR = 2

API_CHANGE_TEXT = ["none", "minor", "major"]


def parse_command_line():
    """Parse command line"""

    # Create parser
    parser = argparse.ArgumentParser(description=__doc__)
    subparsers = parser.add_subparsers(dest="command", help="subcommand help")
    parser_dump = subparsers.add_parser("dump", help="dump help")
    parser_dump.set_defaults(subcommand=dump)
    parser_dump.add_argument(
        "--lib-dir", type=Path, required=True, help="Location of LALSuite libraries"
    )
    parser_dump.add_argument(
        "--pub-header-dir",
        type=Path,
        required=True,
        help="Location of LALSuite public headers",
    )
    parser_dump.add_argument(
        "--include-path",
        type=Path,
        nargs="+",
        default=list(),
        help="Include path for compiling LALSuite headers",
    )
    parser_dump.add_argument(
        "--debug-dir",
        type=Path,
        default=None,
        help="Location of LALSuite library debug symbols",
    )
    parser_dump.add_argument(
        "--sha",
        default=None,
        help="SHA of git commit from which LALSuite libraries were built",
    )
    parser_dump.add_argument(
        "--output-dir", type=Path, required=True, help="Output directory"
    )
    parser_dump.add_argument("libraries", nargs="+", help="List of LALSuite libraries")
    parser_compare = subparsers.add_parser("compare", help="compare help")
    parser_compare.set_defaults(subcommand=compare)
    parser_compare.add_argument(
        "--old-dump-dir",
        type=Path,
        required=True,
        help="Location of old LALSuite library API dumps",
    )
    parser_compare.add_argument(
        "--new-dump-dir",
        type=Path,
        required=True,
        help="Location of new LALSuite library API dumps",
    )
    parser_compare.add_argument(
        "--table-title",
        default="API Changes",
        help="Title of table displaying API changes",
    )
    parser_compare.add_argument(
        "--output-dir", type=Path, required=True, help="Output directory"
    )

    # Parse command line
    args = parser.parse_args()

    return args


def check_tool_version(tool_name, min_version):
    """Check version of tools satisfied minimum requirements"""

    # Call tools with -dumpversion to return just the version number
    proc = run([tool_name, "-dumpversion"], stdout=PIPE, stderr=DEVNULL, check=True)

    # Parse the version number into a 2-element tuple
    stdout = proc.stdout.decode("utf-8")
    version = tuple(int(v) for v in stdout.split("."))

    # Compare version with the minimum required
    if version < min_version:
        print(
            "ERROR: {tool_name} version {version} is less than {min_version}".format(
                tool_name=tool_name,
                version=".".join(version),
                min_version=".".join(min_version),
            )
        )
        sys.exit(1)


def get_lalsuite_version(output_dir, sha):
    """Get LALSuite version number"""

    # Build command line
    cmdline = ["autoconf", "--trace", "AC_INIT:$1:$2"]

    # Run command
    print(f"Running {cmdline}")
    proc = run(cmdline, stdout=PIPE, stderr=PIPE)
    stdout = proc.stdout.decode("utf-8")
    stderr = proc.stderr.decode("utf-8")

    # Check for errors
    if proc.returncode > 0:
        print(
            f"ERROR: {cmdline} failed\n=== stdout ===\n{stdout}\n=== stderr ===\n{stderr}\n--------------",
            file=sys.stderr,
        )
        sys.exit(1)

    # Get version number
    stdout = stdout.strip()
    name, version = stdout.split(":")
    if name != "LALSuite":
        print(f"ERROR: unexpected output '{stdout}'")
        sys.exit(1)

    # Add shortened SHA if given
    if sha:
        version += "-" + sha[:8]

    # Write version to file
    with (output_dir / "lalsuite.version").open("w") as version_file:
        version_file.write(version)


def find_library_and_version(lib_dir, lib_name, lib_sha):
    """Find library in a directory, and return its full version number"""

    # Find library filename with full version number
    lib_glob = f"lib{lib_name}.so.*.*.*"
    lib_paths = list(Path(lib_dir).glob(str(lib_glob)))
    if len(lib_paths) != 1:
        print(f"ERROR: glob('{lib_glob}') returned '{lib_paths}'")
        sys.exit(1)

    # Extract library version number
    lib_filename = lib_paths[0].name
    _, so, lib_version = lib_filename.split(".", maxsplit=2)
    if so != "so":
        msg = f"first extension of file '{lib_filename}' is not 'so'"
        raise ValueError(msg)

    # Add shortened SHA if given
    if lib_sha:
        lib_version += "-" + lib_sha[:8]

    return lib_paths[0], lib_version


def run_abi_dumper(
    lib_path, lib_version, pub_header_dir, lib_include_path, lib_debug_dir, dump_file
):
    """Run abi-dumper"""

    # Build command line
    cmdline = [
        "abi-dumper",
        "-output",
        str(dump_file.absolute()),
        "-vnum",
        lib_version,
        "-public-headers",
        str(pub_header_dir.absolute()),
    ]
    if len(lib_include_path) > 0:
        cmdline.extend(["-include-paths"])
        cmdline.extend([str(p.absolute()) for p in lib_include_path])
    if lib_debug_dir:
        cmdline.extend(["-search-debuginfo", str(lib_debug_dir.absolute())])
    cmdline.extend([str(lib_path.absolute())])

    # Run command
    print(f"Running {cmdline}")
    proc = run(cmdline, stdout=PIPE, stderr=PIPE)
    stdout = proc.stdout.decode("utf-8")
    stderr = proc.stderr.decode("utf-8")

    # Check for errors
    if proc.returncode > 0:
        print(
            f"ERROR: {cmdline} failed\n=== stdout ===\n{stdout}\n=== stderr ===\n{stderr}\n--------------",
            file=sys.stderr,
        )
        sys.exit(1)


def run_abi_compliance_checker(
    lib_name, old_dump_file, new_dump_file, output_dir, tmp_dir
):
    """Run abi-compliance-checker"""

    # Base command line
    base_cmdline = [
        "abi-compliance-checker",
        "-library",
        lib_name,
        "-old",
        str(old_dump_file.absolute()),
        "-new",
        str(new_dump_file.absolute()),
        "-source",
        "-skip-internal-symbols",
        "VCS_HEADER_LIBRARY_MISMATCH",
    ]

    # Create HTML report for human viewing (if requested), XML report for further parsing
    xml_report_file = tmp_dir.absolute() / Path(f"{lib_name}.xml")
    report_cmdlines = [["-xml", "-report-path", str(xml_report_file)]]
    if output_dir is not None:
        report_cmdlines.append(
            ["-report-path", str(output_dir.absolute() / f"{lib_name}.html")]
        )
    for report_cmdline in report_cmdlines:

        # Build command line
        cmdline = base_cmdline + report_cmdline

        # Run command
        print(f"Running {cmdline}")
        proc = run(cmdline, stdout=PIPE, stderr=PIPE)
        stdout = proc.stdout.decode("utf-8")
        stderr = proc.stderr.decode("utf-8")

        # Check for errors
        # - abi-compliance-checker return 0(1) for (in)compatible libraries; not considered errors
        if proc.returncode > 1:
            print(
                f"ERROR: {cmdline} failed\n=== stdout ===\n{stdout}\n=== stderr ===\n{stderr}\n--------------",
                file=sys.stderr,
            )
            sys.exit(1)

    # Parse XML report for version numbers, verdict, and count number of problems
    xml_report = parse(xml_report_file)
    old_version = xml_report.find("test_info").find("version1").find("number").text
    new_version = xml_report.find("test_info").find("version2").find("number").text
    xml_verdict = xml_report.find("test_results").find("verdict").text
    xml_problem_count = 0
    for xml_problem in xml_report.find("problem_summary").iter():
        xml_problem_text = re.sub(r"[^0-9]", "", xml_problem.text)
        if len(xml_problem_text) > 0:
            xml_problem_count += int(xml_problem_text)

    # Determine API change
    api_change = API_NONE
    if xml_verdict == "incompatible":

        # An incompatible verdict indicates major changes
        api_change = API_MAJOR

    elif xml_problem_count > 0:

        # Any compatible problems (e.g. added symbols) indicates minor changes
        api_change = API_MINOR

    return old_version, new_version, api_change


def dump(args, tmp_dir):
    """Dump APIs"""

    get_lalsuite_version(args.output_dir, args.sha)

    for lib_name in args.libraries:

        # Find library
        lib, version = find_library_and_version(args.lib_dir, lib_name, args.sha)

        # Dump API
        dump_file = args.output_dir / f"{lib_name}.dump"
        run_abi_dumper(
            lib,
            version,
            args.pub_header_dir,
            args.include_path,
            args.debug_dir,
            dump_file,
        )

    return 0


def compare(args, tmp_dir):
    """Compare APIs"""

    old_lalsuite_version = (args.old_dump_dir / "lalsuite.version").read_text().strip()
    new_lalsuite_version = (args.new_dump_dir / "lalsuite.version").read_text().strip()

    # Find API dump files
    dump_files = set()
    dump_files.update(Path(p.name) for p in args.old_dump_dir.glob("*.dump"))
    dump_files.update(Path(p.name) for p in args.new_dump_dir.glob("*.dump"))

    api_changes = {"lalsuite": API_NONE}
    tbl = []
    for dump_file in dump_files:
        lib_name = dump_file.stem
        old_dump_file = args.old_dump_dir / dump_file
        new_dump_file = args.new_dump_dir / dump_file

        if old_dump_file.is_file() and new_dump_file.is_file():

            # Compare APIs
            (
                old_version,
                new_version,
                api_changes[lib_name],
            ) = run_abi_compliance_checker(
                lib_name,
                args.old_dump_dir / dump_file,
                args.new_dump_dir / dump_file,
                args.output_dir,
                tmp_dir,
            )

        elif old_dump_file.is_file() and not new_dump_file.is_file():

            # Run abi-compliance-checker just to get version number
            old_version, _, _ = run_abi_compliance_checker(
                lib_name,
                args.old_dump_dir / dump_file,
                args.old_dump_dir / dump_file,
                None,
                tmp_dir,
            )
            new_version = "-"
            api_changes[lib_name] = API_MAJOR

        elif not old_dump_file.is_file() and new_dump_file.is_file():

            # Run abi-compliance-checker just to get version number
            _, new_version, _ = run_abi_compliance_checker(
                lib_name,
                args.new_dump_dir / dump_file,
                args.new_dump_dir / dump_file,
                None,
                tmp_dir,
            )
            old_version = "-"
            api_changes[lib_name] = API_MAJOR

        # Add to table of API changes
        tbl.append(
            [lib_name, old_version, new_version, API_CHANGE_TEXT[api_changes[lib_name]]]
        )

        # Determine overall API change
        if api_changes[lib_name] > api_changes["lalsuite"]:
            api_changes["lalsuite"] = api_changes[lib_name]

    # Output table of API changes
    col_widths = [13, 20, 20, 10]
    row_fmt = " | ".join(["{:<%d}" % col_width for col_width in col_widths])
    header = row_fmt.format("Library", "Old Version", "New Version", "API Change")
    header_div = row_fmt.format(*["-" * col_width for col_width in col_widths])
    n_title_div = len(header_div) - len(args.table_title) - 2
    title_div_left = "=" * (n_title_div // 2)
    title_div_right = "=" * ((n_title_div + 1) // 2)
    title = " ".join([title_div_left, args.table_title, title_div_right])
    print(title)
    print(header)
    print(header_div)
    for row in tbl:
        print(row_fmt.format(*row))
    print(header_div)
    print(
        row_fmt.format(
            "lalsuite",
            old_lalsuite_version,
            new_lalsuite_version,
            API_CHANGE_TEXT[api_changes["lalsuite"]],
        )
    )

    # Output JSON file with API changes
    api_changes_txt = {k: API_CHANGE_TEXT[v] for k, v in api_changes.items()}
    json.dump(api_changes_txt, (args.output_dir / "api_changes.json").open("w"))

    return 0


def main():
    """Main program"""

    # Check tool versions
    check_tool_version("abi-dumper", (1, 2))
    check_tool_version("abi-compliance-checker", (2, 3))

    # Parse command line
    args = parse_command_line()

    # Make output directory
    args.output_dir.mkdir(parents=True, exist_ok=True)

    # Execute command
    with TemporaryDirectory() as tmp_dir:
        return args.subcommand(args, Path(tmp_dir))


if __name__ == "__main__":
    sys.exit(main())
