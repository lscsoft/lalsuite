#!/usr/bin/env python3
# Author: Karl Wette, 2022

import logging
import os
import sys
import re
from functools import lru_cache as memoize
from pathlib import Path
from subprocess import (
    DEVNULL,
    check_call,
    check_output,
)

import yaml

from debian.deb822 import Deb822, PkgRelation

from pyrpm.spec import Spec, replace_macros

# configure logging
LOGGER = logging.getLogger(__name__.rsplit(".", 1)[-1])
try:
    from coloredlogs import ColoredFormatter as _Formatter
except ImportError:
    _Formatter = logging.Formatter
if not LOGGER.hasHandlers():
    _LOG_HANDLER = logging.StreamHandler()
    _LOG_HANDLER.setFormatter(_Formatter(
        fmt="[%(asctime)s] %(levelname)+8s: %(message)s",
    ))
    LOGGER.addHandler(_LOG_HANDLER)
LOGGER.setLevel(logging.DEBUG)

AUTOCONF_VAR_REGEX = re.compile("@[A-Z_]*@")


# -- YAML parsing -----------

def _yaml_ignore_unknown(*args):
    """Return `None` for unknown tag
    """
    return None


yaml.SafeLoader.add_constructor(None, _yaml_ignore_unknown)


@memoize(10)
def safe_load_ignore_unknown(file):
    if isinstance(file, Path):  # if given a path, open it
        with open(file, "r") as tmp:
            return safe_load_ignore_unknown(tmp)
    # load from an open file
    return yaml.load(file, Loader=yaml.SafeLoader)


@memoize(10)
def parse_conda_meta(path):
    """Parse conda meta.yaml.in.in, stripping out jinja templates
    and invalid characters.
    """
    meta_data = ''
    jinja_bracket = 0
    invalid_characters = '@'
    with open(path, 'r') as f:
        while True:
            c = f.read(1)
            if not c:
                break
            if c == '{':
                jinja_bracket += 1
            if not jinja_bracket and c not in invalid_characters:
                meta_data += c
            if c == '}':
                jinja_bracket -= 1
    return safe_load_ignore_unknown(meta_data)


# -- utilities --------------

def report_mismatch(type_, path, found, needed):
    missing = set(needed) - set(found)
    extra = set(found) - set(needed)
    if missing:  # missing dependencies
        LOGGER.critical(
            f"{type_}: incorrect lalsuite dependencies in '{path}'",
        )
        LOGGER.critical(f"   currently : {', '.join(sorted(found))}")
        LOGGER.critical(f"   required  : {', '.join(sorted(needed))}")
        LOGGER.critical(f"   missing   : {', '.join(sorted(missing))}")
        LOGGER.critical(
            "please add the missing requirements in the relevant file",
        )
    if extra:  # extra dependencies
        LOGGER.warning(f"{type_}: extra lalsuite dependencies in '{path}'")
        LOGGER.warning(f"   currently : {', '.join(sorted(found))}")
        LOGGER.warning(f"   required  : {', '.join(sorted(needed))}")
        LOGGER.warning(f"   extra     : {', '.join(sorted(extra))}")
        LOGGER.warning(
            "please considering removing the extras from the relevant file",
        )
    return int(bool(missing))


def _parse_debian_relations(raw):
    # remove debhelper variables
    raw = re.sub("[${}]", "", raw)
    # replace autoconf version variables with '0.0'
    raw = AUTOCONF_VAR_REGEX.sub("0.0", raw)
    # squeeze whitespace
    raw = re.sub(r",\s*", ",", raw.strip())

    return PkgRelation.parse_relations(raw.strip(","))


# -- AutoConf helpers -------

def boot():
    """Generate `./configure` by running `./00boot`
    """
    # autoconf --trace only works if autoreconf has been run
    print('calling ./00boot')
    check_call(
        ["./00boot"],
        cwd=os.path.curdir,
    )


def get_direct_depends():
    """Get list of direct LALSuite library dependencies.

    Returns
    -------
    depends : dict
        A dict with LALSuite subpackages as keys, and a list
        of the other LALSuite libraries on which they directly
        depend as the values.
    """
    out = check_output(
        ['autoconf', '--trace=lalsuite_config_subdir:$1,$2'],
        cwd=os.path.curdir,
        encoding="utf-8",
        stderr=DEVNULL,
    )
    depends = {}
    for line in filter(None, out.lower().splitlines()):
        lib, deps = line.split(',')
        depends[lib] = set(deps.split())
    return depends


def get_full_depends(direct):
    """Get list of full LALSuite library dependencies

    i.e. including dependencies of dependencies
    """
    recursive = {key: set(value) for key, value in direct.items()}
    for lib in recursive:
        while True:
            full = recursive[lib].copy()
            for dep in recursive[lib]:
                full |= recursive[dep]
            if full == recursive[lib]:
                break
            recursive[lib] = full
    return recursive


# -- Check functions --------

def check_autoconf_depends(lib, depends):
    LOGGER.debug("checking autoconf")
    # trace use of macros LALSUITE_CHECK_LIB and LALSUITE_CHECK_OPT_LIB
    # in configure.ac
    found = set()
    for macro in ('LALSUITE_CHECK_LIB', 'LALSUITE_CHECK_OPT_LIB'):
        out = check_output(
            ['autoconf', f'--trace={macro}:$1'],
            cwd=lib,
            encoding="utf-8",
        )
        for dep in out.lower().splitlines():
            if dep not in ('', 'lalsupport'):
                found.add(dep)
    return report_mismatch("autoconf", f"{lib}/configure.ac", found, depends)


def check_gitlab_depends(lib, depends):
    LOGGER.debug("checking gitlab-ci")
    with open('.gitlab-ci.yml') as f:
        gitlab_ci = safe_load_ignore_unknown(f)
    for include in gitlab_ci.get("include", []):
        if "local" in include:
            with open(include["local"].lstrip("/")) as f:
                gitlab_ci.update(safe_load_ignore_unknown(f))
    error = 0

    for pkg in ('pkg', 'conda', 'deb', 'rpm', 'koji'):
        found = set()
        ci_job_name = f'{lib}:{pkg}'
        for needs in gitlab_ci[ci_job_name]['needs']:
            if needs.startswith('lal'):
                dep = ':'.join(needs.split(':')[:2])
                found.add(dep)
        correct = set([f'{dep}:{pkg}' for dep in depends])
        error |= report_mismatch("gitlab CI", ci_job_name, found, correct)

    return error


def check_conda_depends(lib, depends):
    """Check conda dependencies
    """
    LOGGER.debug("checking conda")
    error = 0
    meta_file = Path(lib) / "conda" / "meta.yaml.in.in"
    meta = parse_conda_meta(meta_file)

    # check dependencies
    # - check top-level 'requirements'
    # - 'liblal*' and dependencies appear in 'host' section
    # - 'python-lal*' dependencies appear in 'run' section
    sections = {
        'lib{}': ('host',),
        'python-{}': ('run',),
    }
    requirements = [
        ('requirements', ('lib{}', 'python-{}'), meta['requirements']),
    ]
    for conda_meta_path, templates, requirement in requirements:
        for template in templates:
            template_regex = re.compile(template.format(r'lal[^-]*'))
            for section in sections[template]:
                if section in requirement:
                    deps = set()
                    for entry in requirement[section]:
                        if not entry:
                            continue
                        entry_first_word = entry.split()[0]
                        if template_regex.fullmatch(entry_first_word):
                            deps.add(entry_first_word)
                    correct_deps = {template.format(dep) for dep in depends}
                    error |= report_mismatch(
                        "conda",
                        meta_file,
                        deps,
                        correct_deps,
                    )
    return error


def check_debian_depends(lib, direct):
    LOGGER.debug("checking debian/control")
    error = 0

    # parse debian/control.in
    control_file = Path(lib) / "debian" / "control.in"
    with open(control_file, 'r') as f:
        control = list(Deb822.iter_paragraphs(f))

    # check dependencies
    # - check 'Build-Depends' in 'Source' paragraph
    # - check 'Depends' in 'Package' paragraphs
    # - 'Source' requires 'liblal*-dev', and 'python3-lal*', packages
    # - 'Package' named 'liblal*-dev' requires 'liblal*-dev' packages
    # - 'Package' named 'python3-lal*' requires 'python3-lal*' packages
    # - 'Package' named 'lal*-octave' requires 'lal*-octave' packages
    for paragraph in control:
        # parse information we need
        if 'Source' in paragraph:
            depends_str = paragraph['Build-Depends']
            templates = ('lib{}-dev', 'python3-{}')
            control_path = f"{paragraph['Source']}:Build-Depends"
        else:
            control_path = f"{paragraph['Package']}:Depends"
            depends_str = paragraph['Depends']
            if paragraph['Package'] == f'lib{lib}-dev':
                templates = ('lib{}-dev',)
            elif paragraph['Package'] == f'python3-{lib}':
                templates = ('python3-{}',)
            elif paragraph['Package'] == f'{lib}-octave':
                templates = ('{}-octave',)
            else:
                continue

        depends = _parse_debian_relations(depends_str)
        for template in templates:
            template_regex = re.compile(template.format(r'lal[^-]*'))
            deps = set()
            for debdeplist in depends:
                for debdep in debdeplist:
                    if template_regex.fullmatch(debdep['name']):
                        deps.add(debdep['name'])
            correct_deps = {template.format(dep) for dep in direct}
            error |= report_mismatch(
                "deb",
                f"{control_file} | {control_path}",
                deps,
                correct_deps,
            )
    return error


def check_spec_depends(lib, direct):
    LOGGER.debug("checking RPM spec")
    error = 0

    # parse rpm .spec file
    spec_file = Path(lib, f'{lib}.spec.in')
    spec = Spec.from_file(spec_file)
    spec.macros['python3_pkgversion'] = '3x'

    # -- check dependencies

    # - check 'BuildRequires' in base package
    name = replace_macros(
        spec.name,
        spec,
    ).replace('@PACKAGE@', lib)
    requires_list = [
        (f"{name}:BuildRequires",
         ('lib{}-devel', 'python3x-{}'),
         spec.build_requires),
    ]

    # - check 'Requires' in sub-packages
    # - base package requires 'liblal*-devel', and 'python3x-lal*' packages
    # - package named 'liblal*-devel' requires 'liblal*-devel' packages
    # - package named 'liblal*' requires 'liblal*' packages
    # - package named 'python3x-lal*' requires 'python3x-lal*' packages
    # - package named 'lal*-octave' requires 'lal*-octave' packages
    for package in spec.packages:
        name = replace_macros(
            package.name,
            spec,
        ).replace('@PACKAGE@', lib)
        if name == f'lib{lib}-devel':
            requires_list.append(
                (f"{name}:Requires", ('lib{}-devel',), package.requires),
            )
        if name == f'lib{lib}':
            requires_list.append(
                (f"{name}:Requires", ('lib{}',), package.requires),
            )
        if name == f'python3x-{lib}':
            requires_list.append(
                (f"{name}:Requires", ('python3x-{}',), package.requires),
            )
        if name == f'{lib}-octave':
            requires_list.append(
                (f"{name}:Requires", ('{}-octave',), package.requires),
            )
    for spec_path, templates, requires in requires_list:
        for template in templates:
            template_regex = re.compile(template.format(r'lal[^-]*'))
            deps = set()
            for req in requires:
                req_name = replace_macros(
                    req.name,
                    spec,
                ).replace('@PACKAGE@', lib)
                if template_regex.fullmatch(req_name):
                    deps.add(req_name)
            correct_deps = {template.format(dep) for dep in direct}
            error |= report_mismatch(
                "rpm",
                f"{spec_file}/{spec_path}",
                deps,
                correct_deps,
            )
    return error


def check_pkgconfig_depends(lib, depends):
    """Check pkg-config `Requires.private`.
    """
    LOGGER.debug("checking pkg-config")
    error = 0
    depends = [f'{dep} >= @{dep.upper()}_VERSION@' for dep in depends]

    # parse pkg-config .pc.in file
    # (storing only the _last_ occurrence of Requires.private)
    pkg_config_file = Path(lib, f"{lib}.pc.in")
    found = []
    with open(pkg_config_file, "r") as f:
        for line in f:
            if not line.startswith("Requires.private"):
                continue
            requirestr = line.strip().replace("@@", "@, @").split(":", 1)[1]
            found = [r.strip() for r in requirestr.split(",") if "lal" in r]

    # print missing dependencies
    error |= report_mismatch(
        "pkg-config",
        pkg_config_file,
        found,
        depends,
    )

    return error


# -- run ----------------------------------------

def check_lib_dependencies(lib, direct, full):
    """Check that a LALSuite library's dependencies are complete.

    Parameters
    ----------
    lib : `str`
        The name of the LALSuite subpackage.

    direct : `list`
        The list of direct LALSuite dependencies for this library.

    full : `list`
        The full (recursive) list of LALSuite dependencies for this
        library.

    Returns
    -------
    exitcode : `int`
        ``0`` if the dependencies are well stated, otherwise ``1``
    """
    if not direct:
        return 0

    error = 0

    LOGGER.info(f"-- checking {lib}")
    LOGGER.debug(f"direct depends    : {','.join(sorted(direct))}")
    LOGGER.debug(f"recursive depends : {','.join(sorted(full))}")

    error |= check_autoconf_depends(lib, direct)
    error |= check_gitlab_depends(lib, full)
    error |= check_conda_depends(lib, direct)
    error |= check_debian_depends(lib, direct)
    error |= check_spec_depends(lib, direct)
    if lib != 'lalapps':
        error |= check_pkgconfig_depends(lib, direct)
    return error


def main():
    """Run the thing
    """
    if not Path("./configure").is_file():
        boot()

    direct_depends = get_direct_depends()
    full_depends = get_full_depends(direct_depends)

    # check dependencies
    exit_status = 0
    for lib in sorted(direct_depends):
        exit_status |= check_lib_dependencies(
            lib,
            direct_depends[lib],
            full_depends[lib],
        )

    # return exit status
    LOGGER.info("-- done")
    if exit_status:
        LOGGER.critical("-- errors found, see logs above")
    return exit_status


if __name__ == "__main__":
    sys.exit(main())
