#!/usr/bin/env python3
# Author: Karl Wette, 2025

"""Get artifacts containing API dumps of LALSuite libraries"""

import sys
import argparse
import logging
import gitlab
from zipfile import ZipFile
from io import BytesIO
from natsort import natsorted

# configure logging
LOGGER = logging.getLogger(__name__.rsplit(".", 1)[-1])
try:
    from coloredlogs import ColoredFormatter as _Formatter
except ImportError:
    _Formatter = logging.Formatter
if not LOGGER.hasHandlers():
    _LOG_HANDLER = logging.StreamHandler()
    _LOG_HANDLER.setFormatter(
        _Formatter(
            fmt="[%(asctime)s] %(levelname)+8s: %(message)s",
        )
    )
    LOGGER.addHandler(_LOG_HANDLER)
LOGGER.setLevel(logging.DEBUG)


def parse_command_line():
    """Parse command line"""

    # Create parser
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument(
        "server",
        type=str,
        help="GitLab server",
    )
    parser.add_argument(
        "repo",
        type=str,
        help="GitLab repository",
    )
    parser.add_argument(
        "artifact",
        type=str,
        choices=["master", "release"],
        help="Artifacts to get",
    )
    parser.add_argument(
        "-v",
        dest="version",
        type=int,
        required=True,
        help="Artifact file version number",
    )

    # Parse command line
    args = parser.parse_args()

    return args


def fetch_server(server):
    """Fetch GitLab"""
    server = gitlab.Gitlab(server)
    return server


def main():
    """Main program"""

    # Parse command line
    args = parse_command_line()

    # Interface to GitLab repository
    server = fetch_server(args.server)
    repo = server.projects.get(args.repo)

    # Get artifact details
    job_name = f"lint:api-dump-{args.artifact}"
    artifact_path = f"api-dump-{args.artifact}-v{args.version}.tar.bz2"
    if args.artifact == "release":
        tags = repo.tags.list(iterator=True)
        lalsuite_tags = [t.name for t in tags if t.name.startswith("lalsuite-v")]
        ref_name = natsorted(lalsuite_tags)[-1]
    else:
        ref_name = "master"

    # Download latest artifacts as ZIP archive
    LOGGER.info(f"downloading latest artifacts for ref={ref_name}, job={job_name}")
    artifacts_archive = BytesIO()
    repo.artifacts.download(
        ref_name, job_name, streamed=True, action=artifacts_archive.write
    )

    # Extract artifact file from ZIP archive
    with ZipFile(artifacts_archive) as zf:
        if artifact_path not in zf.namelist():
            LOGGER.warning(
                f"artifact={artifact_path} does not exist in latest artifacts for ref={ref_name}, job={job_name}"
            )
            return 77
        zf.extract(artifact_path)

    return 0


if __name__ == "__main__":
    sys.exit(main())
