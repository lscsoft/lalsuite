# ----------------------------------------------------------------------
# LALSuite: Gitlab-CI configuration
#
# If you have any questions, please email lal-discuss@ligo.org, or open
# a question ticket at https://git.ligo.org/lscsoft/lalsuite/-/issues/
# ----------------------------------------------------------------------

# -- setup --------------------------------------

stages:
  # make tarballs for each subpackage
  - tarballs
  # build packages for each subpackage
  - LAL
  - LALFrame
  - LALMetaIO
  - LALSimulation
  - LALBurst
  - LALInspiral
  - LALInference
  - LALPulsar
  - LALApps
  - wheels
  # end-to-end tests
  - integration tests
  - compiler tests
  - platform tests
  - upgrade tests
  # build containers
  - docker
  # quality checks
  - coverage
  - lint
  # documentation
  - documentation
  # deploy packages
  - deploy

include:
  # include job templates from the gitlab-ci-templates repo
  # see https://computing.docs.ligo.org/gitlab-ci-templates/
  - project: computing/gitlab-ci-templates
    file:
      # helpers for codequality jobs
      - codequality.yml
      # helpers for debian builds
      - debian.yml
      # helpers for RHEL builds
      - rhel.yml
      # a flake8 job template
      - python.yml

  # CI rules
  - local: '/.gitlab/ci/rules.yml'

  # make tarballs for each subpackage
  - local: '/.gitlab/ci/tarballs.yml'

  # build packages for each subpackage
  - local: '/.gitlab/ci/conda.yml'
  - local: '/.gitlab/ci/deb.yml'
  - local: '/.gitlab/ci/pkg.yml'
  - local: '/.gitlab/ci/rpm.yml'
  - local: '/.gitlab/ci/wheels.yml'

  # end-to-end tests
  - local: '/.gitlab/ci/integration.yml'
  - local: '/.gitlab/ci/compilers.yml'
  - local: '/.gitlab/ci/platform.yml'
  - local: '/.gitlab/ci/upgrade.yml'

  # build containers
  - local: '/.gitlab/ci/containers.yml'

  # quality checks
  - local: '/.gitlab/ci/coverage.yml'
  - local: '/.gitlab/ci/lint.yml'

  # documentation
  - local: '/.gitlab/ci/docs.yml'

  # deploy packages
  # - wheels: see .gitlab/ci/wheels.yml

# -- global settings ----------------------------

# by default cache everything in the .cache directory
cache:
  key: "${CI_JOB_NAME}"
  paths:
    - .cache

variables:
  PIPELINE_NAME: "LALSuite CI/CD"

  # run autoreconf in pedantic and loud mode
  AUTORECONF: "autoreconf --verbose --warnings=error"

  # version of python to use for builds
  LALSUITE_PYTHON_VERSION: "3.12"

  # gitlab runners have 4 cores per job
  CPU_COUNT: 4

  # don't need git history
  GIT_DEPTH: 1

  # global build helpers
  VERBOSE: "true"

  # where to store files, ideally everything that is 'cache'
  # should go under ${CI_PROJECT_DIR}/.cache to match the
  # cache key setting above
  XDG_CONFIG_HOME: "${CI_PROJECT_DIR}/.config"
  XDG_CACHE_HOME: "${CI_PROJECT_DIR}/.cache"
  CCACHE_DIR: "${CI_PROJECT_DIR}/.cache/ccache"
  CONDA_PKGS_DIRS: "${CI_PROJECT_DIR}/.cache/conda/pkgs"
  PIP_CACHE_DIR: "${CI_PROJECT_DIR}/.cache/pipe"

  # where to build conda environments (i.e. not in ~/.conda)
  CONDA_ENVS_PATH: "${CI_PROJECT_DIR}/envs"

  # what file to use for conda configuration
  CONDARC: "${CI_PROJECT_DIR}/.condarc"

  # tell Debian-based installers to run non-interactively
  DEBIAN_FRONTEND: noninteractive

# default parameters for jobs
default:
  # retry running jobs on failure
  retry: 1

  # cancel job when a newer pipeline starts
  interruptible: true

# -- helper fragments ----------------------------------

# to use:
# - !reference [.name-of-fragment]

#
# Run a command up to 5 times with delays, mainly to survive
# transient network issues. The delay starts at 15 seconds,
# and increases by 15 seconds after each retry. If all
# retried commands fail, exit with a given exit code.
#
# Usage:
#   retry [--exit-code <exit-code>]
#         [--max-try <2--5>]
#         [--exit-patt <awk-pattern>]
#         [--cleanup-cmd <cleanup-command>]
#         [--]
#         <command> <args>...
#
# Options:
#   --exit-code:
#       Exit code if all retries fail (1--255, default: 111).
#   --max-try:
#       How many times to try <command> (2--5, default: 3).
#   --exit-patt:
#       Fail if <awk-pattern> is detected in the output of
#       <command>. A default pattern may also be set using
#       the $RETRY_EXIT_PATT environment variable.
#   --cleanup-cmd:
#       Run <cleanup-command> before retrying <command>. A
#       default cleanup command may also be set using the
#       $RETRY_CLEANUP_CMD environment variable.
#
.retry: |
  retry() {
    local exitcode=111
    local max=3
    local awkprog="{print}"
    if [[ "X${RETRY_EXIT_PATT}" != X ]]; then
      awkprog="${awkprog} ${RETRY_EXIT_PATT} {exit ${exitcode}}"
    fi
    local cleanup="${RETRY_CLEANUP_CMD}"
    while true; do
      case "$1" in
        --exit-code)
          shift
          if [ 1 -le $1 ] && [ $1 -le 255 ]; then
            exitcode=$1
          else
            echo "retry: expected 1--255 as argument to --exit-code; got '$1'" >&2
            exit 1
          fi
          shift
          ;;
        --max-try)
          shift
          if [ 2 -le $1 ] && [ $1 -le 5 ]; then
            max=$1
          else
            echo "retry: expected 2--5 as argument to --max-try; got '$1'" >&2
            exit 1
          fi
          shift
          ;;
        --exit-patt)
          shift
          awkprog="${awkprog} $1 {exit ${exitcode}}"
          shift
          ;;
        --cleanup-cmd)
          shift
          if [ "X${cleanup}" != X ]; then
            cleanup="${cleanup}; $1"
          else
            cleanup="$1"
          fi
          shift
          ;;
        --)
          shift
          break
          ;;
        *)
          break
          ;;
      esac
    done
    local n=1
    local delay=15
    while true; do
      if ( set -o pipefail; "$@" 2>&1 | awk "${awkprog}" ); then
        break
      else
        if [[ ${n} -lt ${max} ]]; then
          ((n++))
          echo "retry: command failed: $@"
          if [ "X${cleanup}" != X ]; then
            echo "retry: cleaning up: ${cleanup}"
            eval ${cleanup}
          fi
          echo "retry: sleeping for ${delay} seconds..."
          sleep ${delay};
          ((delay+=15))
          echo "retry: attempt ${n}/${max}: $@"
        else
          echo "retry: command failed after ${n} attempts: $@" >&2
          exit ${exitcode}
        fi
      fi
    done
  }

# basic steps for a job that compiles stuff
.build-init:
  # use retry()
  - !reference [.retry]
  # do not save coredumps
  - ulimit -S -c 0
  # set up ccache
  - export PATH=/usr/lib/ccache:/opt/local/libexec/ccache:$PATH
  # print environment for debugging
  - |
    echo "===== env ====="
    declare -x | cut -c 12-
    echo "----- env -----"

# set up Python virtual environment for pip install
.pip-venv:
  - !reference [.retry]
  - |
    rm -rf .venv/
    ${PYTHON:-python3} -m venv .venv/
    source .venv/bin/activate
    for n in python3 pip; do
      if [ "X`type -p ${n}`" != "X${VIRTUAL_ENV}/bin/${n}" ]; then
         echo "ERROR: virtual environment in '${VIRTUAL_ENV}' is missing ${n}" >&2
         exit 1
      fi
    done
    pip install --upgrade pip

# -- base templates ----------------------------------

# basic before_script template for a compiling job
.build-job:
  timeout: 3 hours
  before_script:
    - !reference [.build-init]

# helper template for jobs running on macOS
.macos-job:
  variables:
    # use the clone strategy so permissions are correctly reset on any failed jobs
    # see: https://gitlab.com/gitlab-org/gitlab-runner/-/merge_requests/3726
    GIT_STRATEGY: clone
    # Clang has weird bugs when compiling with CFLAGS=-O3
    CFLAGS: "-O2"

# tag for macOS x86_64 architecture jobs
.macos-x86_64:
  extends:
    - .macos-job
  tags:
    - macos_x86_64

# tag for macOS arm64 architecture jobs
.macos-arm64:
  extends:
    - .macos-job
  tags:
    - macos_arm64

# deploy outputs to various locations
.deploy:
  stage: deploy
  variables:
    GIT_STRATEGY: none
  retry: 0
  interruptible: false

# -- CI job templates ----------------------------------

# a top-level build runs the standard boot/configure/make
# cycle with some sensible defaults
.make-distcheck:
  extends:
    - .build-job
  variables:
    # default configure flags (can be overridden from dependents)
    CONFIGURE_FLAGS: "--enable-doxygen --enable-python --enable-swig-python"
    # default C flags (can be overridden from dependents)
    CFLAGS: "-O3"
    # target to actually run (distcheck is the most thorough)
    MAKE_TARGET: "distcheck"
  needs: []
  script:
    - ./00boot
    # we use xargs here in case CONFIGURE_FLAGS contains
    # variables with spaces, etc etc
    - xargs ./configure
          --enable-strict-defs
          ${ENABLE_NIGHTLY}
          CFLAGS="${CFLAGS}"
          LALSUITE_LIBTOOL_NO_SUPPRESS=1
          <<< ${CONFIGURE_FLAGS}
    - make -j${CPU_COUNT} VERBOSE=1 ${MAKE_TARGET:-distcheck}
  artifacts:
    # upload some files to debug failures
    paths:
      - config.log
      - Makefile
      - lal*/config.log
      - lal*/libtool
      - lal*/Makefile
      - lal*/**/test-suite.log
    when: on_failure
